package org.qw3rtrun.p3d.g.code.core;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.CsvFileSource;
import org.junit.jupiter.params.provider.MethodSource;
import org.qw3rtrun.p3d.g.code.cmd.GCommand;
import org.qw3rtrun.p3d.g.code.cmd.GCommandCodec;

import java.util.Arrays;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.params.provider.Arguments.of;
import static org.qw3rtrun.p3d.g.code.cmd.G.*;

class GCommandCodecTest {

    private final GCommandCodec codec = new GCommandCodec(new GCoreCodec(XorCheckSum::new, new GCoreEncoder()));

    public static Stream<Arguments> gcodes() {
        return Stream.of(
                of(M(155), "M155"),
                of(M(115, T(1), S(150)), "M115 T1 S150"),
                of(M(32, LIT("test.gco")), "M32 test.gco")
        );
    }

    public static Stream<Arguments> gCommands() {
        return toArgs(
                G(0, X(12), COM(" Move to 12mm on the X axis")),
                G(0, F(1500), COM(" Set the feedrate to 1500 mm/min")),
                G(1, X(90.6), Y(13.8), COM(" Move to 90.6mm on the X axis and 13.8mm on the Y axis")),
                G(1, F(1500), COM(" Set the feedrate to 1500 mm/min")),
                G(92, E(0)),
                G(1, X(50), Y(25.3), E(22.4), COM(" Move while extruding")),
                G(1, F(1500)),
                G(92, E(0)),
                G(1, X(50), Y(25.3), E(22.4), F(3000)),
                G(2, X(125), Y(32), I(10.5), J(10.5)),
                G(3, X(125), Y(32), I(10.5), J(10.5)),
                G(2, I(20), J(20)),
                G(4, P(500), COM(" Dwell for 1/2 second")),
                G(0, X(0), Y(0)),
                G(5, I(0), J(3), P(0), Q(-3), X(1), Y(1)),
                G(5, P(0), Q(-3), X(2), Y(2)),
                G(10, COM(" retract")),
                G(11, COM(" recover")),
                G(12, COM(" stroke pattern (default)")),
                G(12, P(1), S(1), T(3), COM(" zig-zag pattern with 3 triangles")),
                G(12, P(2), S(1), R(10), COM(" 10mm circle")),
//TODO                G(17, new GElement[0]),
                G(18, new GElement[0]),
                G(19, new GElement[0]),
                G(20, COM(" set units to inches")),
                G(21, COM(" set units to millimeters")),
                G(27, COM(" Raise Z if lower")),
                G(27, P(2), COM(" Always raise Z")),
                G(28, COM(" Home all axes")),
                G(28, X(), Z(), COM(" Home the X and Z axes")),
                G(28, O(), COM(" Home all \"untrusted\" axes")),
                G(28, COM(" Home XYZ.")),
                G(29, P(1), COM(" Do automated probing of the bed.")),
                G(29, P(3), COM(" Smart Fill Repeat until all mesh points are filled in")),
                G(29, S(0), COM(" Save UBL mesh points to slot 0 (EEPROM).")),
//TODO                G(29, F(), 1 (0.0), COM(" Set Fade Height for correction at 10.0 mm.")),
                G(29, A(), COM(" Activate the UBL System.")),
                G(28, COM(" Home XYZ.")),
                G(29, P(4), R(255), COM(" Do manual probing of the bed.")),
                G(29, S(0), COM(" Save UBL mesh points to slot 0 (EEPROM).")),
//                G(29, F(), 1 (0.0), COM(" Set Fade Height for correction at 10.0 mm.")),
                G(29, A(), COM(" Activate the UBL System.")),
                M(190, S(65), COM(" Heat Bed to 65C. Not required")),
                M(104, S(210), COM(" Heat Hotend to 210C. Not required")),
                G(29, T(), COM(" View the Z compensation values.")),
                G(29, P(2), B(), T(), COM(" Manually probe unreachable points. Requires an LCD controller.")),
                G(26, C(), P(), T(3.0), COM(" Produce mesh validation pattern with primed nozzle. G26 is optional; any bed leveling stl would also work.")),
                G(29, P(4), T(), COM(" Move nozzle to 'bad' areas and fine tune the values if needed.")),
                G(29, S(0), COM(" Save UBL mesh values to EEPROM.")),
                G(29, L(0), COM(" Load the mesh stored in slot 0 (from G29 S0)")),
                G(29, J(), COM(" Probe 3 points and tilt the mesh according to what it finds")),
                G(33, P(1)),
                G(33, V(0)),
                G(33, P(2)),
                G(33, T()),
                G(35, S(40)),
                G(42, I(0), J(0), COM(" front left corner")),
                G(42, I(4), J(4), COM(" center")),
                G(42, I(4), J(8), COM(" back center")),
                G(42, I(8), J(8), COM(" back right")),
                G(53, G(0), X(0), Y(0), Z(0)),
                G(53, G(1), X(20)),
                G(53, new GElement[0]),
                G(55, COM(" Select workspace 1")),
                G(0, X(0), Y(0), X(0)),
                G(60, S(0)),
//TODO                G(61, X("Y"), S(0)),
                G(76, COM(" calibrate bed")),
                G(76, B(), COM(" calibrate bed only")),
                G(76, P(), COM(" calibrate probe only")),
                G(92, X(10), E(90)),
                G(92, X(0), Y(0), Z(0)),
//TODO                G(92.1, COM("TODO")),
                M(0, LIT("Click to continue")),
                M(3, O(128)),
                M(3),
                M(3, S(204), I()),
                M(4, S(50)),
                M(4, S(128)),
                M(4, O(204)),
                M(4),
                M(4, S(204), I()),
                M(16, LIT("Arthur")),
                M(17, Z(), E()),
                M(18, S(60)),
                M(18, Z(), E()),
//TODO                M(23, / ("musicg\~1/jingle.gco")),
                M(27, S(4)),
                M(27, S(0)),
                M(27, C()),
                M(28, LIT("file.txt")),
//TODO                M(28, B(1), f("ile.txt")),
//TODO                M(30, / ("path/to/file.gco")),
//TODO        M(32, S(5022), !("/boats/sailboat.gco")),
//TODO                M(32, P(), !("/models/lgbust.gco#")),
//TODO                M(33, f("unstuff/mask.gco")),
                M(42, S(1)),
                M(42, P(33), S(1)),
                M(42, P(44), S(128)),
                M(43, COM("Get a report on all pins")),
                M(43, I(), COM("Watch pin 56 for changes")),
                M(43, P(56), W(), COM("Start watching endstops")),
                M(43, E(1), COM("Toggle pins 3-6 five times with 1 second low and 1 second high pulses but only if the pin isnâ€™t in the protected list.")),
                M(43, T(), S(3), L(6), R(5), W(1000), COM("Test probe controlled by servo index 2.")),
                M(43, S(), P(2)),
                M(43, T(), S(3), L(6), R(5), W(1000)),
                M(73, P(25), R(43)),
                M(80, COM(" power on")),
                M(81, COM(" power off")),
                M(85, S(600)),
                M(86, S(240), T(100), E(40), B(30)),
                M(92, E(688.4)),
                M(104, S(185), COM("set target temperature for E1")),
                M(104, T(1), S(205), COM("AUTOTEMP: Set autotemp range")),
                M(104, F(), S(180), B(190), COM("AUTOTEMP: Disable autotemp")),
                M(104),
                M(106, S(200)),
                M(0, Y("ou're"), LIT("up")),
                M(108, COM(" as your \"Continue\" button")),
                M(109, S(180), COM("Set target temperature")),
                M(109, R(120), COM("Set target temperature for E1 and wait (if heating up)")),
                M(109, T(1), R(205), COM("AUTOTEMP: Set autotemp range")),
                M(109, F(), S(180), B(190), COM("AUTOTEMP: Disable autotemp")),
                M(109),
                M(110),
                M(110, N(100)),
                M(111, S(38), COM(" LEVELING")),
                M(111, S(8)),
                M(111, S(247), COM(" 255 - 8")),
                M(111, S(0)),
                M(117, H("ello"), W("orld!")),
                M(117),
                M(118, E(1), Y("ello"), W("orld!")),
                M(118, A(1), LIT("action:cancel")),
                M(123, S(5)),
                M(125, L(20), COM(" park and retract")),
                M(126, COM(" open valve 1")),
                M(127, COM(" close valve 1")),
                M(141, S(40)),
                M(143, S(15)),
                M(143, S(0)),
                M(145, S(0), H(190), B(70), F(50)),
                M(150, B(30)),
                M(150, R(100), I(0)),
                M(150, U(45), I(1)),
                M(150, W(255), S(1)),
                M(150, K(), R(127)),
                M(163, S(0), P(0.6)),
                M(163, S(1), P(0.4)),
                M(164, S(5)),
                M(163, S(0), P(3)),
                M(163, S(1), P(5)),
                M(164, S(4)),
                M(163, S(0), P(0.6)),
                M(163, S(1), P(0.4)),
                M(164, S(5)),
                M(163, S(0), P(3)),
                M(163, S(1), P(5)),
                M(164, S(4)),
                M(165, A(0.2), B(0.4), C(0.3), D(0.1)),
                M(166, A(0), Z(250), I(0), J(1), S(1)),
                M(166, A(0), Z(250), I(0), J(1), T(3)),
                M(166, T()),
                M(190, S(80)),
                M(190, R(40)),
                M(190, R(70), T(600)),
                M(200, D(2.85)),
                M(200, S(1), D(1.75)),
                M(200, S(0), D(1.75)),
                M(201, X(50), Y(50), COM("Set the max acceleration for E1 print moves:")),
                M(201, E(8000), T(1), COM("Set frequency limits for the XY axes:")),
                M(201, F(60), S(47)),
                M(203, X(100), Y(100)),
                M(204, P(2400)),
                M(205, T(40), COM(" Travel feedrate = 40mm/s")),
                M(206, Z(-0.2)),
                M(206, X(10), COM("Shift the print area 10mm to the left")),
                M(208, S(0.2), F(600)),
                M(207, S(2.0), COM(" 2.0mm retract")),
                M(208, S(0.5), COM(" 2.0mm + 0.5mm recover")),
                M(260, A(99), COM(" Target slave address")),
                M(260, B(77), COM(" M")),
                M(260, B(97), COM(" a")),
                M(260, B(114), COM(" r")),
                M(260, B(108), COM(" l")),
                M(260, B(105), COM(" i")),
                M(260, B(110), COM(" n")),
                M(260, S(1), COM(" Send the current buffer")),
                M(261, A(99), B(5), COM(" i2c-reply: from:99 bytes:5 data:hello")),
                M(281, P(0), L(90), U(0)),
                M(282, P(1)),
                M(290, Z(0.25), COM(" move up 0.25mm on the Z axis")),
                M(300, S(440), P(200)),
                M(300, S(660), P(250)),
                M(300, S(880), P(300)),
                M(302, COM(" report current cold extrusion state")),
                M(302, P(0), COM(" enable cold extrusion checking")),
                M(302, P(1), COM(" disable cold extrusion checking")),
                M(302, S(0), COM(" always allow extrusion (disable checking)")),
                M(302, S(170), COM(" only allow extrusion above 170")),
                M(302, S(170), P(1), COM(" set min extrude temp to 170 but leave disabled")),
                M(303, E(0), C(8), S(210)),
                M(303, E(-1), C(8), S(60)),
                M(305, P(0), R(4700), T(100000), B(3950), C(0.0)),
                M(351, S(1), X(1), E(0)),
                M(355, S(1), P(128)),
                M(403, E(0), F(1)),
                M(403, E(3), F(2)),
                M(404, W(1.75)),
                M(412, S(1)),
                M(412, S(0)),
                M(412),
                M(412, D(35), COM(" requires FILAMENT_RUNOUT_DISTANCE_MM")),
                M(413, S(1)),
                M(413, S(0)),
                M(413, COM("Power-loss recovery ON")),
                M(421, I(2), J(2), Z(-0.05)),
                M(421, X(100), Y(100), Z(-0.05)),
                M(421, I(2), J(2), Q(-0.01)),
                M(422, S(1), X(10), Y(10)),
                M(422, W(2), X(10), Y(10)),
                M(423),
                M(423, R()),
                M(423, X(4), Z(-0.03)),
                M(423, X(0), I(50)),
                M(425, X(0.1), Y(0.2), Z(0.3), COM(" Set backlash to specific values for all axis")),
                M(425, F(1), COM(" Enable backlash compensation at 100%")),
                M(425, F(1), S(3)),
                M(425, F(1), S(0)),
                G(425, COM(" Perform a full calibration")),
                M(425, F(1), COM(" Use full measured value of backlash on X")),
                G(29, COM(" Perform probe and measure backlash on Z")),
                M(425, F(1), Z(), COM(" Use full measured value of backlash on Z")),
                M(430, I(1), V(1), W(1)),
                M(486, T(12), COM(" Total of 12 objects (otherwise the firmware must count)")),
                M(486, S(3), COM(" Indicate that the 4th object is starting now")),
                M(486, S(-1), COM(" Indicate a non-object")),
                M(486, P(10), COM(" Cancel object with index 10 (the 11th object)")),
                M(486, U(2), COM(" Un-cancel object with index 2 (the 3rd object)")),
                M(486, C(), COM(" Cancel the current object (use with care!)")),
                M(493, S(1), P(1), K(0.22)),
                M(493, S(11), A(37), B(37), D(0), P(1), K(0.18)),
                M(502, COM(" reset")),
                M(500, COM(" saved")),
                M(511, P(12345)),
                M(512, P(1234), S(9090)),
                M(569, S(1), Z(), E()),
                M(569, S(0), X(), Y()),
                M(569, S(1), I(1), X(), T(1), E()),
                M(569),
                M(575, P(0), B(115200)),
                M(575, B(250000)),
                M(592, A(0.2), B(0.3)),
                M(593, X(), F(18.4)),
                M(593, F(36.2)),
                M(593, F(0)),
                M(600, COM(" execute filament change")),
                M(600, X(10), Y(15), Z(5), COM(" Do filament change at X:10")),
                M(603, U(120), L(125)),
                M(605, S(2)),
                M(605, S(2), E(2)),
                M(605, S(2), P(5)),
                M(710, A(0), S(255)),
                M(710, A(1), S(255), I(128)),
                M(710, R()),
                M(808, L(5)),
                M(118, H("ello"), W("orld")),
                M(808),
//TODO                M(815, G(0), X(0), Y("0|G0"), Z("10|M300"), S(440), P(50)),
                M(851, Z(-2.0)),
                M(851, Z(1.2)),
                M(851, X(-1.70), Y(-1.30)),
                M(851, X(0.20), Y(0.40)),
                M(871, COM(" print current values")),
                M(871, R(), COM(" reset all values factory default (zero")),
                M(871, P(), I(1), V(-5), COM(" set probe compensation value at index 1 to -5Âµm")),
                M(871, B(), I(2), V(20), COM(" set bed compensation value at index 2 to 20Âµm")),
                M(871, E(), I(4), V(-13), COM(" set extruder compensation value at index 4 to -13Âµm")),
                M(876, S(0)),
                M(900, S(0), COM(" Select main K factor and apply it")),
                M(900, T(2), K(0.22), L(0.4), COM(" Set both T2 K factors. K0.22 will be applied.")),
                M(900, T(2), S(1), COM(" Select extra K factor. L0.4 will be applied.")),
                M(900, T(2), S(1), COM(" (does nothing this time)")),
                M(900, T(2), L(0.3), COM(" Set T2 extra (and active) K factor")),
                M(900, T(2), S(0), COM(" Select main K factor (0.22)")),
                M(906, X(5), Y(5), Z(5)),
                M(906, T(1), E(10)),
                M(906, I(1), X(5)),
                M(912, COM(" clear all")),
                M(912, X(), COM(" clear X and X2")),
                M(912, X(1), COM(" clear X1 only")),
                M(912, X(2), COM(" clear X2 only")),
                M(912, X(), E(), COM(" clear X")),
                M(912, E(1), COM(" clear E1 only")),
                M(913, X(100)),
                M(913, X(100), Y(120), E(30)),
                M(915, S(300), Z(5)),
                M(919),
//TODO                M(919, X("YZE"), O(3), P(-1), S(1)),
                M(919, Z(), O(3), P(-1), S(1)),
                M(919, Z(), I(1), O(3), P(-1), S(1)),
                M(928, LIT("log.txt"))
        );
    }

    private static Stream<Arguments> toArgs(GCommand... commands) {
        return Arrays.stream(commands).map(Arguments::of);
    }

    @ParameterizedTest
    @MethodSource("gcodes")
    void test(GCommand gCommand, String output) {
        assertEquals(output, codec.encode(gCommand));
    }

    @ParameterizedTest
    @MethodSource("gCommands")
    void test(GCommand gCommand) {
        var encode = codec.encode(gCommand);
        assertNotNull(encode);
        System.out.println(encode);
    }

    @ParameterizedTest
    @CsvFileSource(resources = {"/marlin.gcode"})
    void decodeTest(String line) {
        var decode = codec.decode(line);
        System.out.println(decode + ",");
        assertNotNull(decode);
    }
}
